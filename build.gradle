plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.7.1'
    id 'com.adarshr.test-logger' version '3.0.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

ext['junit-jupiter.version'] = '5.7.2'




sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['src/resources/']
        }
    }
    test {
        java {
            srcDirs = ['tst/']
        }
        resources {
            srcDirs = ['tst/resources/']
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.6.1'
}

//Ignore all below this point
repositories {
    mavenCentral()
}

checkstyle {
    sourceSets = [sourceSets.main]
    configFile = file("$rootDir/LibrariesAndUtilities/ATACheckstyle/configuration/checkstyle/checkstyle.xml")
    configProperties.put('checkstyle.suppression.filter', "$rootDir/LibrariesAndUtilities/ATACheckstyle/configuration/checkstyle/suppressions.xml")
    ignoreFailures = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

spotbugs {
    spotbugsTest.enabled = false
    ignoreFailures = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
        }
    }
}

test {
    useJUnitPlatform()

    testlogger {
        theme 'plain'
        logLevel 'quiet'
    }

    testLogging {

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))

                def scoringPercentage = 10 - result.failedTestCount
                scoringPercentage = scoringPercentage / 10
                println("Exit Result for Scoring: " + scoringPercentage)
            }
        }
    }
}

project.configurations.implementation.setCanBeResolved(true)
jar {
    manifest {
        attributes(
                "Main-Class": "",
                "Class-Path": configurations.implementation.collect { it.name }.join(' ')
        )
    }
    dependsOn('dependencies')
}
